/*
 * $Id$
 *
 * Copyright 2006, The jCoderZ.org Project. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *    * Neither the name of the jCoderZ.org Project nor the names of
 *      its contributors may be used to endorse or promote products
 *      derived from this software without specific prior written
 *      permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.jcoderz.commons.config;

import java.rmi.RemoteException;

import org.jcoderz.commons.ArgumentMalformedException;

/**
 * ConfigurationService's business interface in order to fetch specific
 * configuration data.
 *
 * On this level only primitive types String, int, long and boolean are used.
 * The well formed and complex typed interfaces for the specific services are
 * using this more simple interface.
 *
 * A factory method is provided to get the service specific typed interface.
 * The service specific, well formed and typed interfaces and their
 * implementation is generated by XSLT.
 *
 * For notifications of cache updates a registration for a ConfigurationListener
 * is provided.
 *
 */
public interface ConfigurationServiceInterface
      extends ConfigurationServiceCommonInterface
{
   /**
    * gets the ServiceConfiguration interface related to the given
    * *Service*Configuration classname.
    * This is the factory method that is used in the generated Container and
    * Client Factories for the given service.
    *
    * @param classname the service configuration interface classname (full
    *       qualified) for which the ServiceConfiguration interface should be
    *       created. The classname MUST include the complete package path.
    * @return the related ServiceConfiguration instance
    *
    * @throws RemoteException if a remote call fails.
    * @throws ArgumentMalformedException Is thrown to indicate the illegal use
    *         of a null object as input parameter.
    * @throws ConfigurationFactoryFailedException if no ServiceConfiguration
    *       instance for the given application service could be found/created.
    */
   ServiceConfiguration getServiceConfiguration (
         String classname)
         throws RemoteException, ArgumentMalformedException,
               ConfigurationFactoryFailedException;

   /**
    * ConfigurationListener instance that will be registered to receive
    * notifications.
    *
    * @param listener ConfigurationListener instance that will be registered
    *        to receive notifications.
    * @throws RemoteException if a remote call fails.
    * @throws ArgumentMalformedException Is thrown to indicate the illegal use
    *         of a null object as input parameter.
    */
   void addConfigurationListener (ConfigurationListener listener)
         throws RemoteException, ArgumentMalformedException;

}
