#copyrightHeader()

package ${package};

#set($imports = $cmpgen.buildBeanImportList($stmt))
#foreach($import in $imports)
import ${import};
#end

/**
 * $baseName Entity Bean.
 * Generated by Phoenix CMP Generator II $cmpgen.getVersion()
 *
 * @author fawkeZ (jCoderZ.org)
 *
 * @ejb.bean name="${baseName}" type="CMP" jndi-name="${baseName}"
 *      cmp-version="2.x" use-soft-locking="false"
 *      schema="$cmpgen.sqlNameToJavaName($stmt.getTableName())"
#if($cmpgen.checkIfHelperRequired($stmt))
 * @ejb.data-object extends="${package}.${baseName}TypeConverter"
#end
 * @ejb.persistence table-name="$stmt.getTableName()"
 * @ejb.resource-ref res-ref-name="${datasource}"
 *    res-type="javax.sql.DataSource"
 *    res-auth="Container"
 *
 * FIXME: please adapt the transaction xdoclet tag!
 * @ejb.transaction type="Required"
 *
#if(! $stmt.isSkipAppserverSupport())
 * Application Server Support
 * @weblogic.data-source-name "${datasource}"
 *
 * @weblogic.enable-call-by-reference True
#if($stmt.isOptimisticVersionCount())
 * @weblogic.persistence verify-columns="Version"
 *       optimistic-column="version_count"
#else
 * @weblogic.persistence verify-columns="Read"
#end
 *       delay-updates-until-end-of-tx="True"
 * @weblogic.cache concurrency-strategy="Optimistic"
 * @weblogic.delay-database-insert-until ejbCreate
 *
#end
#if($stmt.getAdditionalJavadoc())
 *
$stmt.getAdditionalJavadoc()
 *
#end
## * @jcoderz.ds-jndi-name ds-jndi-name="${datasource}"
## * @jcoderz.dbms-table dbms-table="${$stmt.getTableName()}"
## * @jcoderz.concurrency-control concurrency-control="OPTIMISTIC"
 */
public abstract class ${baseName}Bean
#if($cmpgen.checkIfHelperRequired($stmt))
      extends ${baseName}TypeConverter
#end
      implements javax.ejb.EntityBean
{
   /** The name of the DB table which this entity represents. */
   public static final String TABLE_NAME = "$stmt.getTableName().toUpperCase()";

   /**
    * Create this Entity bean from its data object.
    * @param data data object containing the entity
    * @return primary key
    * @throws CreateException if the container encounters a
    *         problem during bean creation.
    * @ejb.create-method
    */
   public ${baseName}PK ejbCreate (${baseName}Data data)
         throws CreateException
   {
#set($pkColCount = 0)
#foreach ($column in $stmt.getColumns())##
#computeFields()
#if($column.isPrimaryKey())
      $simpleSetterName(data.${simpleGetterName}());
#set($pkColCount = $pkColCount + 1)
#end
#end
      setData(data);
      return new ${baseName}PK(
#set($count = 1)
#foreach ($column in $stmt.getColumns())
#computeFields()
#if ($column.isPrimaryKey())
            ${simpleGetterName}()#if($count < $pkColCount),#end

#set($count = $count + 1)
#end
#end
      );
   }

   /**
    * Post-Create this Entity bean from its data object.
    * @param data data object containing the entity
    */
   public void ejbPostCreate (${baseName}Data data)
   {
   }

#foreach($column in $stmt.getColumns())
#computeFields()
#if($column.getLoadMethod())
#simpleBeanGetter(false)

#simpleSetter(false)

#elseif($column.isSkipInInterface())
#simpleBeanGetter(false)

#simpleSetter(false)

#else
#simpleBeanGetter(true)

#simpleSetter(true)

#end
#end
   /**
    * Returns the data of the entity.
    * @return a data object representing the entity
    * @ejb.interface-method
    */
   public abstract ${baseName}Data getData ();

   /**
    * Sets the data of the entity except for the primary key field(s).
    * @param data data object representing the entity.
    * @ejb.interface-method
    */
   public abstract void setData (${baseName}Data data);
}
