<chapter>

   <title>Naming Conventions</title>

   <para>Naming conventions make programs more understandable by making them
   easier to read. They can also give information about the function of the
   identifier - for example, whether it&apos;s a constant, package, or class -
   which can be helpful in understanding the code.</para>

   <para>If acronyms or abbreviations are used in a name only the first
   letter might be uppercase (except for Constants). So choose class
   <classname>HtmlGateway</classname> not class
   <classname>HTMLGateway</classname>.</para>

   <section>

      <title>Packages</title>

      <para>The prefix of a unique package name is always
      <classname>org.jcoderz.</classname> and must match the regular
      expression <classname>^org\.jcoderz(\.[a-z][a-z0-9]*)+$</classname>.
      </para>

      <para>Subsequent components of the package name vary according
      to the teams own internal naming conventions.</para>

   </section>

   <section>

      <title>Classes</title>

      <para>Class names should be nouns, in mixed case with the first letter
      of each internal word capitalized and must match the regular
      expression <classname>^[A-Z][a-zA-Z0-9]*$</classname>.</para>

      <para>Try to keep your class names simple and descriptive. Use whole
      words - avoid acronyms and abbreviations (unless the abbreviation is
      much more widely used than the long form, such as URL or HTML), e.g.
      <classname>class Raster</classname> or 
      <classname>class ImageSprite</classname>.</para>

   </section>

   <section>

      <title>Interfaces</title>

      <para>Use nouns to name interfaces that act
      as service declaration:
         <informalexample>
            <programlisting>&InterfaceServiceDeclaration;</programlisting>
         </informalexample>
      </para>
      <para>Use adjectives to name interfaces
      that act as descriptions of capabilities. Most interfaces that
      describe capabilities use an adjective created by tacking an
      <quote>able</quote> or <quote>ible</quote> suffix to onto the
      end of verb:
         <informalexample>
            <programlisting>&InterfaceCapabilitiesDeclaration;</programlisting>
         </informalexample>
      </para>

      <para>Interface names must, like class names,
      have the first letter (of each noun) capitalized.</para>

   </section>

   <section>

      <title>Methods</title>

      <para>Methods should be verbs, in mixed case with the first letter
      lowercase, with the first letter of each internal word capitalized:
      <classname>run()</classname>, <classname>runFast()</classname>, or
      <classname>getBackground()</classname>.</para>

   </section>

   <section>

      <title>Variables</title>

      <para>Variables are in mixed case with a lowercase first letter,
      internal words start with capital letters. Variable names must not
      start with underscore _ or dollar sign $ characters.</para>

      <para>Variable names should be short yet meaningful. The choice of a
      variable name should be mnemonic - that is, designed to indicate to the
      casual observer the intent of its use. One-character variable names
      must be avoided except for temporary throwaway variables. Common
      names for temporary variables are i, j, k, m, and n for integers; c, d,
      and e for characters.
      </para>

      <para>Do not use local variable names that hide variables at higher
      levels.</para>

      <para>The name of class members must start with a lowercase letter
      <classname>s</classname> and match the regular
      expression <classname>^s[A-Z][a-zA-Z0-9]*$</classname>.
      The name of natural members must start
      with a lowercase <classname>m</classname> and match the regular
      expression <classname>^m[A-Z][a-zA-Z0-9]*$</classname>.
      <informalexample>
         <programlisting>&MemberSample;</programlisting>
      </informalexample>
      </para>

      <para>
      Names of variables that refer to collections of objects should
      correspond to the plural form of the semantic type contained in
      the collection. This enables a reader of the code to distinguish between
      variables representing multiple values from those representing single
      values:
         <informalexample>
            <programlisting>&PluralizeSample;</programlisting>
         </informalexample>
      </para>

   </section>

   <section>

      <title>Constants</title>

      <para>The names of constants
      	must be all uppercase with words separated by underscores
      (<classname>_</classname>). Exception to this are the constants
      <classname>logger</classname> and 
      <classname>serialVersionUID</classname>.
      <informalexample>
         <programlisting>&Constants;</programlisting>
      </informalexample>
      </para>

   </section>

</chapter>
