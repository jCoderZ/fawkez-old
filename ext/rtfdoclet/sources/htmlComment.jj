options {
LOOKAHEAD=1;
IGNORE_CASE=true;
STATIC=false;
DEBUG_TOKEN_MANAGER=false;
}

PARSER_BEGIN(HtmlComment)

import java.io.StringReader;
public class HtmlComment {
	
	private int tabulation=0;
	private boolean newLine=true;
	private boolean opening=false;
	private StringBuffer result = new StringBuffer();
	

/*	public static void main(String args[]) throws ParseException {
		HtmlComment parser = new HtmlComment(new StringReader("a&lt;column&gt; @see 
t\\oto &pouf <b>hello</b><br>A list now<ul><li>one<li>two</ul>finished. A 
p:<p>OK"));
		try {
			parser.parse();
		} catch (ParseException x) {
			System.out.println("Exiting.");
			throw x;
		}
		System.out.println(parser.getResult());
	}
	*/
	
	public String getResult() {
		return result.toString();
	}
	
	private void print(String str) {
		// we will print something, so the new line is not anymore empty
		if (newLine==true) {
			newLine=false;
			if (tabulation>0) {
				result.append("\\fi-70\\li"+(71*tabulation+71)+" - ");
			}
		}
		result.append(str);
	}
	
	private void println() {
		newLine=true;
//		result.append("\\par {\\pard} ");
		result.append("\\par ");
	}
}
PARSER_END(HtmlComment)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
}


TOKEN : /* ESCAPE CHARACTERS */
{
	< LESS_THAN: "&lt;" >
|	< GREATHER_THAN: "&gt;" >
|	< AMP:    "&amp;" >
|	< QUOTE:  "&quot;" >
|	< AElig:  "&AElig;">
|	< Aacute: "&Aacute;" >
|	< Acirc:  "&Acirc;">
|	< Agrave: "&Agrave;">
|	< Aring:  "&Aring;">
|	< Atilde: "&Atilde;">
|	< Auml:   "&Auml;">
|	< Ccedil: "&Ccedil;">
|	< ETH:    "&ETH;">
|	< Eacute: "&Eacute;">
|	< Ecirc:  "&Ecirc;">
|	< Egrave: "&Egrave;">
|	< Euml:   "&Euml;">
|	< Iacute: "&Iacute;">
|	< Icirc:  "&Icirc;">
|	< Igrave: "&Igrave;">
|	< Iuml:   "&Iuml;">
|	< Ntilde: "&Ntilde;">
|	< Oacute: "&Oacute;">
|	< Ocirc:  "&Ocirc;">
|	< Ograve: "&Ograve;">
|	< Oslash: "&Oslash;">
|	< Otilde: "&Otilde;">
|	< Ouml:   "&Ouml;">
|	< THORN:  "&THORN;">
|	< Uacute: "&Uacute;">
|	< Ucirc:  "&Ucirc;">
|	< Ugrave: "&Ugrave;">
|	< Uuml:   "&Uuml;">
|	< Yacute: "&Yacute;">
|	< aacute: "&aacute;">
|	< acirc:  "&acirc;">
|	< aelig:  "&aelig;">
|	< agrave: "&agrave;">
|	< aring:  "&aring;">
|	< atilde: "&atilde;">
|	< auml:   "&auml;">
|	< ccedil: "&ccedil;">
|	< eacute: "&eacute;">
|	< ecirc:  "&ecirc;">
|	< egrave: "&egrave;">
|	< eth:    "&eth;">
|	< euml:   "&euml;">
|	< iacute: "&iacute;">
|	< icirc:  "&icirc;">
|	< igrave: "&igrave;">
|	< iuml:   "&iuml;">
|	< ntilde: "&ntilde;">
|	< oacute: "&oacute;">
|	< ocirc:  "&ocirc;">
|	< ograve: "&ograve;">
|	< oslash: "&oslash;">
|	< otilde: "&otilde;">
|	< ouml:   "&ouml;">
|	< szlig:  "&szlig;">
|	< thorn:  "&thorn;">
|	< uacute: "&uacute;">
|	< ucirc:  "&ucirc;">
|	< ugrave: "&ugrave;">
|	< uuml:   "&uuml;">
|	< yacute: "&yacute;">
|	< yuml:   "&yuml;">
|	<UNKNOWN_ESCAPE_CODE: "&" (~["<",">"," ","\r","\t","\n"])* (";"| " ") >
}

TOKEN :
{
	< ANTI_SLASH : "\\" >
|	< OPEN_BRACKET : "{" >
|	< CLOSE_BRACKET : "}" >
|	< #WORD_DEF : ((~["<",">"," ","\r","\t","\n","&"])+) >
|	< EMPTY_TAG: "<" ([" ","\r","\t","\n"])* ">" >
|	< BEGIN_OPEN_TAG: "<" > : IN_HTML
|	< END_OPEN_TAG: "</" > : IN_HTML
|	< CLOSE_TAG: ">" >
|	< JAVADOC_SEE: "@see" >
|	< WORD: <WORD_DEF> >
}

<IN_HTML> TOKEN : 
{
	< BR_TAG: "BR"> : DEFAULT
|	< ANCHOR_TAG: "A" > : DEFAULT
|	< P_TAG: "P" > : DEFAULT
|	< UL_TAG: "UL" > : DEFAULT
|	< LI_TAG: "LI" > : DEFAULT
|	< UNKNOWN: <WORD_DEF> > : DEFAULT
}



SPECIAL_TOKEN : /* TEXT IN QUOTE */
{
  <TEXT_IN_QUOTE: "\"" (~["\""])*  "\"">
}



void parse() :
{}
{
(element())* { while( tabulation > 0 ) { tabulation--; print("{\\par}}"); } } <EOF>
}


void element() :
{}
{
	escapeCode()
|	tag()
|	<JAVADOC_SEE> { print("\\b "); } element() { print("\\b0"); }
|	<ANTI_SLASH>  { print("\\\\"); }
|	<OPEN_BRACKET> { print("\\{"); }
|	<CLOSE_BRACKET> { print("\\}"); }
|	<WORD> { print(token.image+" "); }
}


void tag() :
{}
{
	<EMPTY_TAG>
|	<BEGIN_OPEN_TAG> {opening=true;} possibleTag() (<WORD>)* <CLOSE_TAG>
|	<END_OPEN_TAG> {opening=false;} possibleTag() (<WORD>)* <CLOSE_TAG>
}


void possibleTag() :
{}
{
	<UL_TAG> openCloseULTag()
|	<LI_TAG> {if (newLine==false); println(); }
|	<BR_TAG> {println(); }
|	<ANCHOR_TAG> {if (opening) print("{\\f1\\cb1\\cf4 "); else print("}"); }
|	<P_TAG> {println(); println(); }
|	<UNKNOWN> // skip
}

void openCloseULTag() :
{}
{
 {if (opening) { print("{"); tabulation++; } else { if( tabulation > 0 ) { tabulation--; print("{\\par}}"); } } }
}

void escapeCode() :
{}
{
	<LESS_THAN>     { print("<"); }
|	<GREATHER_THAN> { print(">"); }
|	<AMP>    { print("&"); }
|	<QUOTE>  { print("\""); }
|	<AElig>  { print("Æ"); }
|	<Aacute> { print("Á"); }
|	<Acirc>  { print("Â"); }
|	<Agrave> { print("À"); }
|	<Aring>  { print("Å"); }
|	<Atilde> { print("Ã"); }
|	<Auml>   { print("Ä"); }
|	<Ccedil> { print("Ç"); }
|	<ETH>    { print("?"); }
|	<Eacute> { print("É"); }
|	<Ecirc>  { print("Ê"); }
|	<Egrave> { print("È"); }
|	<Euml>   { print("Ë"); }
|	<Iacute> { print("Í"); }
|	<Icirc>  { print("Î"); }
|	<Igrave> { print("Ì"); }
|	<Iuml>   { print("Ï"); }
|	<Ntilde> { print("Ñ"); }
|	<Oacute> { print("Ó"); }
|	<Ocirc>  { print("Ô"); }
|	<Ograve> { print("Ò"); }
|	<Oslash> { print("Ø"); }
|	<Otilde> { print("Õ"); }
|	<Ouml>   { print("Ö"); }
|	<THORN>  { print("?"); }
|	<Uacute> { print("Ú"); }
|	<Ucirc>  { print("Û"); } 
|	<Ugrave> { print("Ù"); }
|	<Uuml>   { print("Ü"); }
|	<Yacute> { print("Ý"); }
|	<aacute> { print("á"); }
|	<acirc>  { print("â"); }
|	<aelig>  { print("æ"); }
|	<agrave> { print("à"); }
|	<aring>  { print("å"); }
|	<atilde> { print("ã"); }
|	<auml>   { print("ä"); }
|	<ccedil> { print("ç"); }
|	<eacute> { print("é"); }
|	<ecirc>  { print("ê"); }
|	<egrave> { print("è"); }
|	<eth>    { print("?"); }
|	<euml>   { print("ë"); }
|	<iacute> { print("í"); }
|	<icirc>  { print("î"); }
|	<igrave> { print("ì"); }
|	<iuml>   { print("ï"); }
|	<ntilde> { print("ñ"); }
|	<oacute> { print("ó"); }
|	<ocirc>  { print("ô"); }
|	<ograve> { print("ò"); }
|	<oslash> { print("ø"); }
|	<otilde> { print("õ"); }
|	<ouml>   { print("ö"); }
|	<szlig>  { print("ß"); }
|	<thorn>  { print("?"); }
|	<uacute> { print("ú"); }
|	<ucirc>  { print("û"); }
|	<ugrave> { print("ù"); }
|	<uuml>   { print("ü"); }
|	<yacute> { print("ý"); }
|	<yuml>   { print("ÿ"); }
|	<UNKNOWN_ESCAPE_CODE>
}

