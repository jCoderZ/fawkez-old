/*
 * $Id: SourceDirectoryReader.java 1408 2009-04-14 16:06:46Z amandel $
 *
 * Copyright 2006, The jCoderZ.org Project. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *    * Neither the name of the jCoderZ.org Project nor the names of
 *      its contributors may be used to endorse or promote products
 *      derived from this software without specific prior written
 *      permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.jcoderz.phoenix.report;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.xml.bind.JAXBException;

import org.jcoderz.commons.util.Assert;
import org.jcoderz.commons.util.IoUtil;
import org.jcoderz.phoenix.report.jaxb.Item;
import org.jcoderz.phoenix.report.jaxb.ObjectFactory;

/**
 * Reads logoutput as generated by the JavaDoc tool
 * 
 * @author Andreas Mandel
 *
 */
public class JavaDocReportReader implements ReportReader
{
    private static final String CLASSNAME
        = JavaDocReportReader.class.getName();

    private static final Logger logger = Logger.getLogger(CLASSNAME);

    private static final Pattern MESSAGE_PATTERN 
        = Pattern.compile("(.*):([0-9]*): (warning|error) - (.*)");

    private Map<ResourceInfo, List<Item>> mItems;
    
    private File mFile;
        
    public void parse (File f)
        throws JAXBException, FileNotFoundException
    {
        mFile = f;
    }

    public void merge (Map<ResourceInfo, List<Item>> items)
        throws JAXBException
    {
        mItems = items;
        int lineNumber = 0;
        BufferedReader br = null;
        try
        {
            br = new BufferedReader(new FileReader(mFile));
            String line = br.readLine();
            while (line != null)
            {
                parseLine(line, ++lineNumber);
                line = br.readLine();
            }
        }
        catch (IOException ex)
        {
            Assert.fail(
                "Error reading '" + mFile + "' in line " + lineNumber + ".", 
                ex);
        }
        finally 
        {
            IoUtil.close(br);
        }
    }
    
    private void parseLine (String line, int i) 
        throws JAXBException
    {
        final Matcher matcher = MESSAGE_PATTERN.matcher(line);
        if (matcher.matches())
        {
            final Item item = new ObjectFactory().createItem();
            item.setOrigin(Origin.JAVA_DOC);
            item.setSeverity(
                "warning".equals(matcher.group(3)) 
                    ? Severity.DESIGN : Severity.ERROR);
            item.setLine(Integer.parseInt(matcher.group(2)));
            item.setMessage(matcher.group(4));
            // We could add several finding types depending on the message
            
            final FindingType type 
                = JavaDocFindingType.detectFindingTypeForMessage(matcher.group(4));
            if (type == null)
            {
               item.setFindingType("JavaDoc" + matcher.group(3));
               logger.log(Level.INFO, "Could not find finding type for "
                   + "JavaDoc finding with message '" + matcher.group(4)
                   + "'.");
            }
            else
            {
               item.setFindingType(type.getSymbol());
               item.setSeverity(((JavaDocFindingType) type).getSeverity());
            }
            addItemToResource(matcher.group(1), item);
        }
        else
        {
            logger.fine("No finding for: " + line);
        }
    }

    private void addItemToResource (String resourceFilename, Item item)
    {
        final ResourceInfo info = ResourceInfo.lookup(resourceFilename);
        if (info != null)
        {
            final List<Item> l;
            if (mItems.containsKey(info))
            {
                l = mItems.get(info);
            }
            else
            {
                l = new ArrayList<Item>();
                mItems.put(info, l);
            }
            // sometimes javadoc reports the same thing twice...
            final Iterator<Item> i = l.iterator();
            while (i.hasNext())
            {
                final Item it = i.next();
                if (it.getColumn() == item.getColumn()
                    && it.getOrigin() == item.getOrigin()
                    && it.getMessage().equals(item.getMessage()))
                {
                    i.remove();
                    break;
                }
            }
            l.add(item);
        }
        else
        {
            logger.finer("Ignore findings for resource " 
                + resourceFilename + ".");
        }
    }
    
}
